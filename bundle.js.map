{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gameoflife/./src/utils/renderGameField.ts","webpack://gameoflife/./src/utils/getCellAliveNeighborCount.ts","webpack://gameoflife/./src/utils/getAllCellsAliveCount.ts","webpack://gameoflife/./src/index.ts","webpack://gameoflife/./src/utils/gameOfLife.ts","webpack://gameoflife/./src/utils/getNextGeneration.ts"],"sourcesContent":["// import { number } from \"yargs\";\nimport { Obj } from \"./types\";\n\nexport { renderGameField };\n\nconst renderGameField = (obj: Obj) => {\n  console.log(\"obj.el\");\n  const el: HTMLElement = obj.el;\n  const cells: number[][] = obj.field;\n  const rows: number = cells.length;\n  const cols: number = cells[0].length;\n\n  el.innerHTML = \"\";\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      const iDiv: HTMLElement = document.createElement(\"div\");\n      iDiv.classList.add(\"cell\");\n\n      if (cells[y][x]) {\n        iDiv.classList.add(\"alive\");\n      } else {\n        iDiv.classList.add(\"dead\");\n      }\n\n      iDiv.setAttribute(\"data-x\", `${x}`);\n      iDiv.setAttribute(\"data-y\", `${y}`);\n\n      iDiv.addEventListener(\"click\", () => {\n        obj.onClick(x, y);\n      });\n\n      el.appendChild(iDiv);\n    }\n    el.appendChild(document.createElement(\"br\"));\n  }\n};\n","/**\n * Число живых соседей\n * @param {number[][]} field  - игровое поле\n * @param {number} x  - колонка\n * @param {number} y  - строка\n * @returns {number}\n */\nexport function getCellAliveNeighborCount(\n  field: number[][],\n  x: number,\n  y: number\n): number {\n  let count = 0;\n\n  for (let col = x - 1; col <= x + 1; col++) {\n    for (let row = y - 1; row <= y + 1; row++) {\n      if (col === x && row === y) {\n        continue;\n      }\n      if (field[row] === undefined) {\n        continue;\n      }\n\n      const isAlive = Boolean(field[row][col]);\n      count = count + Number(isAlive);\n    }\n  }\n\n  return count;\n}\n","/**\n * Число живых соседей\n * @param {number[][]} field  - игровое поле\n * @returns {number}\n */\nexport function getAllCellsAliveCount(field: number[][]): number {\n  let count = 0;\n  const cells: number[][] = field;\n  const rows: number = cells.length;\n  const cols: number = cells[0].length;\n\n  for (let y = 0; y <= rows - 1; y++) {\n    for (let x = 0; x <= cols - 1; x++) {\n      if (cells[y][x]) {\n        count = count + 1;\n      }\n    }\n  }\n\n  return count;\n}\n","// import \"./styles.css\";\nconsole.log(\"index.ts\");\nimport \"./index.scss\";\nimport { gameOfLife } from \"./utils/gameOfLife\";\n\n// const appDiv:HTMLElement=document.querySelector(\"#app\");\n// console.log('appDiv=',appDiv);\n\ngameOfLife(document.querySelector(\"#app\") as HTMLElement);\n","import { renderGameField } from \"./renderGameField\";\nimport { getNextGeneration } from \"./getNextGeneration\";\nimport { getAllCellsAliveCount } from \"./getAllCellsAliveCount\";\nimport { Obj } from \"./types\";\n\nexport function gameOfLife(app: HTMLElement) {\n  console.log(\"gameOfLife\");\n  console.log(\"app=\", app);\n  const el: HTMLElement = app.querySelector(\"#container\") as HTMLElement;\n\n  const obj: Obj = {\n    el,\n    field: [\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n    ],\n    onClick: (x: number, y: number) => {\n      obj.field[y][x] = +!obj.field[y][x];\n      renderGameField(obj);\n    },\n  };\n  renderGameField(obj);\n\n  const btnStop: HTMLButtonElement = app.querySelector(\n    \".stop\"\n  ) as HTMLButtonElement;\n  btnStop.addEventListener(\"click\", () => {\n    const cells: number[][] = obj.field;\n    const rows: number = cells.length;\n    const cols: number = cells[0].length;\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        obj.field[y][x] = 0;\n      }\n    }\n    renderGameField(obj);\n  });\n\n  const btnChange = app.querySelector(\".change\") as HTMLButtonElement;\n  btnChange.addEventListener(\"click\", () => {\n    const cellsNew: number[][] = [];\n    // console.log(\"before cellsNew=\", cellsNew);\n    const inputX: HTMLInputElement = app.querySelector(\n      \".inputX\"\n    ) as HTMLInputElement;\n    const ix = Number(inputX.value);\n    inputX.value = \"\";\n    const inputY: HTMLInputElement = app.querySelector(\n      \".inputY\"\n    ) as HTMLInputElement;\n    const iy = Number(inputY.value);\n    inputY.value = \"\";\n\n    // console.log(\"inputX=\", ix);\n    // console.log(\"inputY=\", iy);\n\n    const cells: number[][] = obj.field;\n    // let rows = cells.length;\n    // let cols = cells[0].length;\n    // console.log(\"rows=\", rows);\n    // console.log(\"cols=\", cols);\n\n    for (let y = 0; y <= iy - 1; y++) {\n      cellsNew[y] = [];\n      // console.log(\"y=\", y);\n      // console.log(\"cellsNew[y]\", cellsNew[y]);\n      for (let x = 0; x <= ix - 1; x++) {\n        cellsNew[y][x] = 0;\n        // console.log(\"x=\", x);\n        // console.log(\"cell=\", cellsNew[y][x]);\n      }\n    }\n    // console.log(\"after cirle cellsNew=\", cellsNew);\n\n    for (let y = 0; y <= iy - 1; y++) {\n      // console.log(\"y=\", y);\n      // console.log(\"1.cells[y]\", cells[y]);\n      if (cells[y] === undefined) {\n        break;\n      }\n      for (let x = 0; x <= ix - 1; x++) {\n        // console.log(\"x=\", x);\n        // console.log(\"cell=\", cells[y][x]);\n        if (cells[y][x] !== undefined) {\n          cellsNew[y][x] = cells[y][x];\n        }\n        // console.log(\"check cellsNew[y]\", cellsNew[y]);\n      }\n    }\n    // console.log(cellsNew);\n    obj.field = cellsNew;\n    renderGameField(obj);\n  });\n\n  const btnStart: HTMLButtonElement = app.querySelector(\n    \".start\"\n  ) as HTMLButtonElement;\n  btnStart.addEventListener(\"click\", () => {\n    const inputSpeed: HTMLInputElement = app.querySelector(\n      \".inputSpeed\"\n    ) as HTMLInputElement;\n    let speed = Number(inputSpeed.value);\n    if (speed === 0) speed = 1;\n    let count: number = getAllCellsAliveCount(obj.field);\n    console.log(\"count1=\", count);\n    let i = 0;\n\n    let timerId = setTimeout(function tick() {\n      // console.log(\"start\");\n      i = i + 1;\n      // console.log(\"i=\", i);\n      const newField: number[][] = getNextGeneration(obj.field);\n      obj.field = newField;\n      renderGameField(obj);\n      count = getAllCellsAliveCount(obj.field);\n      // console.log(\"count=\", count);\n      if (count > 0) {\n        timerId = setTimeout(tick, 1000 / speed); // (*)\n      } else {\n        setTimeout(() => {\n          clearInterval(timerId);\n          // console.log(\"stop\");\n        }, 1000 / speed);\n      }\n    }, 1000 / speed);\n  });\n}\n","/**\nКаждое следующее поколение рассчитывается на основе предыдущего\n по таким правилам:\nв пустой (мёртвой) клетке, с которой соседствуют \nтри живые клетки, зарождается жизнь;\nесли у живой клетки есть две или три живые соседки,\n то эта клетка продолжает жить; в противном случае \n (если живых соседей меньше двух или больше трёх) \n клетка умирает («от одиночества» или «от перенаселённости»).\n */\nimport { getCellAliveNeighborCount } from \"./getCellAliveNeighborCount\";\n\nexport function getNextGeneration(inputField: number[][]): number[][] {\n  const resultField: number[][] = [];\n  let countAlive = 0;\n  for (let row = 0; row < inputField.length; row++) {\n    resultField[row] = [];\n    for (let col = 0; col < inputField[row].length; col++) {\n      resultField[row][col] = inputField[row][col];\n\n      countAlive = getCellAliveNeighborCount(inputField, col, row);\n\n      if (inputField[row][col] === 1 && (countAlive > 3 || countAlive < 2)) {\n        resultField[row][col] = 0;\n      }\n      if (inputField[row][col] === 0 && countAlive === 3) {\n        resultField[row][col] = 1;\n      }\n    }\n  }\n  return resultField;\n}\n"],"names":["renderGameField","obj","console","log","el","cells","field","rows","length","cols","innerHTML","y","x","iDiv","document","createElement","classList","add","setAttribute","addEventListener","onClick","appendChild","getCellAliveNeighborCount","count","col","row","undefined","isAlive","Boolean","Number","getAllCellsAliveCount","app","querySelector","cellsNew","inputX","ix","value","inputY","iy","inputSpeed","speed","timerId","setTimeout","tick","newField","inputField","resultField","countAlive","getNextGeneration","clearInterval","gameOfLife"],"sourceRoot":""}