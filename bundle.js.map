{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://gameoflife/./src/utils/renderGameField.ts","webpack://gameoflife/./src/utils/gameOfLife.ts","webpack://gameoflife/./src/utils/getCellAliveNeighborCount.ts","webpack://gameoflife/./src/utils/getAllCellsAliveCount.ts","webpack://gameoflife/./src/index.ts","webpack://gameoflife/./src/utils/getNextGeneration.ts"],"sourcesContent":["// import { number } from \"yargs\";\nimport { GameField } from \"./types\";\n\nexport { renderGameField };\n\nconst renderGameField = (obj: GameField) => {\n  const el: HTMLDivElement = obj.el;\n  const cells: number[][] = obj.field;\n  const rows: number = cells.length;\n  const cols: number = cells[0].length;\n\n  el.innerHTML = \"\";\n  for (let y = 0; y < rows; y++) {\n    for (let x = 0; x < cols; x++) {\n      const iDiv: HTMLDivElement = document.createElement(\"div\");\n      iDiv.classList.add(\"cell\");\n\n      if (cells[y][x]) {\n        iDiv.classList.add(\"alive\");\n      } else {\n        iDiv.classList.add(\"dead\");\n      }\n\n      iDiv.setAttribute(\"data-x\", `${x}`);\n      iDiv.setAttribute(\"data-y\", `${y}`);\n\n      iDiv.addEventListener(\"click\", () => {\n        obj.onClick(x, y);\n      });\n\n      el.appendChild(iDiv);\n    }\n    el.appendChild(document.createElement(\"br\"));\n  }\n};\n","import { renderGameField } from \"./renderGameField\";\nimport { getNextGeneration } from \"./getNextGeneration\";\nimport { getAllCellsAliveCount } from \"./getAllCellsAliveCount\";\nimport { GameField } from \"./types\";\n\nexport function gameOfLife(app: HTMLDivElement) {\n  const el: HTMLDivElement = app.querySelector(\"#container\") as HTMLDivElement;\n\n  const obj: GameField = {\n    el,\n    field: [\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n      [0, 0, 0, 0, 0, 0, 0],\n    ],\n    onClick: (x: number, y: number) => {\n      obj.field[y][x] = +!obj.field[y][x];\n      renderGameField(obj);\n    },\n  };\n  renderGameField(obj);\n\n  const btnStop: HTMLButtonElement = app.querySelector(\n    \".stop\"\n  ) as HTMLButtonElement;\n  btnStop.addEventListener(\"click\", () => {\n    const cells: number[][] = obj.field;\n    const rows: number = cells.length;\n    const cols: number = cells[0].length;\n    for (let y = 0; y < rows; y++) {\n      for (let x = 0; x < cols; x++) {\n        obj.field[y][x] = 0;\n      }\n    }\n    renderGameField(obj);\n  });\n\n  const btnChange = app.querySelector(\".change\") as HTMLButtonElement;\n  btnChange.addEventListener(\"click\", () => {\n    const cellsNew: number[][] = [];\n    const inputX: HTMLInputElement = app.querySelector(\n      \".inputX\"\n    ) as HTMLInputElement;\n    const ix = Number(inputX.value);\n    inputX.value = \"\";\n    const inputY: HTMLInputElement = app.querySelector(\n      \".inputY\"\n    ) as HTMLInputElement;\n    const iy = Number(inputY.value);\n    inputY.value = \"\";\n    const cells: number[][] = obj.field;\n\n    for (let y = 0; y <= iy - 1; y++) {\n      cellsNew[y] = [];\n      for (let x = 0; x <= ix - 1; x++) {\n        cellsNew[y][x] = 0;\n      }\n    }\n\n    for (let y = 0; y <= iy - 1; y++) {\n      if (cells[y] === undefined) {\n        break;\n      }\n      for (let x = 0; x <= ix - 1; x++) {\n        if (cells[y][x] !== undefined) {\n          cellsNew[y][x] = cells[y][x];\n        }\n      }\n    }\n    obj.field = cellsNew;\n    renderGameField(obj);\n  });\n\n  const btnStart: HTMLButtonElement = app.querySelector(\n    \".start\"\n  ) as HTMLButtonElement;\n  btnStart.addEventListener(\"click\", () => {\n    const inputSpeed: HTMLInputElement = app.querySelector(\n      \".inputSpeed\"\n    ) as HTMLInputElement;\n    let speed = Number(inputSpeed.value);\n    if (speed === 0) speed = 1;\n    let count: number = getAllCellsAliveCount(obj.field);\n    let i = 0;\n\n    let timerId = setTimeout(function tick() {\n      i = i + 1;\n      const newField: number[][] = getNextGeneration(obj.field);\n      obj.field = newField;\n      renderGameField(obj);\n      count = getAllCellsAliveCount(obj.field);\n      if (count > 0) {\n        timerId = setTimeout(tick, 1000 / speed);\n      } else {\n        setTimeout(() => {\n          clearInterval(timerId);\n        }, 1000 / speed);\n      }\n    }, 1000 / speed);\n  });\n}\n","export function getCellAliveNeighborCount(\n  field: number[][],\n  x: number,\n  y: number\n): number {\n  let count = 0;\n\n  for (let col = x - 1; col <= x + 1; col++) {\n    for (let row = y - 1; row <= y + 1; row++) {\n      if (col === x && row === y) {\n        continue;\n      }\n      if (field[row] === undefined) {\n        continue;\n      }\n\n      const isAlive = Boolean(field[row][col]);\n      count = count + Number(isAlive);\n    }\n  }\n\n  return count;\n}\n","export function getAllCellsAliveCount(field: number[][]): number {\n  let count = 0;\n  const cells: number[][] = field;\n  const rows: number = cells.length;\n  const cols: number = cells[0].length;\n\n  for (let y = 0; y <= rows - 1; y++) {\n    for (let x = 0; x <= cols - 1; x++) {\n      if (cells[y][x]) {\n        count = count + 1;\n      }\n    }\n  }\n\n  return count;\n}\n","import \"./index.scss\";\nimport { gameOfLife } from \"./utils/gameOfLife\";\n\ngameOfLife(document.querySelector(\"#app\") as HTMLDivElement);\n","/**\nКаждое следующее поколение рассчитывается на основе предыдущего\n по таким правилам:\nв пустой (мёртвой) клетке, с которой соседствуют \nтри живые клетки, зарождается жизнь;\nесли у живой клетки есть две или три живые соседки,\n то эта клетка продолжает жить; в противном случае \n (если живых соседей меньше двух или больше трёх) \n клетка умирает («от одиночества» или «от перенаселённости»).\n */\nimport { getCellAliveNeighborCount } from \"./getCellAliveNeighborCount\";\n\nexport function getNextGeneration(inputField: number[][]): number[][] {\n  const resultField: number[][] = [];\n  let countAlive = 0;\n  for (let row = 0; row < inputField.length; row++) {\n    resultField[row] = [];\n    for (let col = 0; col < inputField[row].length; col++) {\n      resultField[row][col] = inputField[row][col];\n\n      countAlive = getCellAliveNeighborCount(inputField, col, row);\n\n      if (inputField[row][col] === 1 && (countAlive > 3 || countAlive < 2)) {\n        resultField[row][col] = 0;\n      }\n      if (inputField[row][col] === 0 && countAlive === 3) {\n        resultField[row][col] = 1;\n      }\n    }\n  }\n  return resultField;\n}\n"],"names":["app","obj","renderGameField","el","cells","field","rows","length","cols","innerHTML","y","x","iDiv","document","createElement","classList","add","setAttribute","addEventListener","onClick","appendChild","getCellAliveNeighborCount","count","col","row","undefined","isAlive","Boolean","Number","getAllCellsAliveCount","querySelector","cellsNew","inputX","ix","value","inputY","iy","inputSpeed","speed","timerId","setTimeout","tick","newField","inputField","resultField","countAlive","getNextGeneration","clearInterval"],"sourceRoot":""}